// This code was generated by an Alaska Airlines operated instance of Azure OpenAI using the GPT 4o model.
import { Low } from 'lowdb';
import { JSONFile } from 'lowdb/node';
import express from 'express';
import cors from 'cors';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import bodyParser from 'body-parser';
// @ts-ignore
import { getPreviousFeedback, getSimilarSeats, recommendSeats } from './apiHelpers.js';
// Define & load JSON file for the database
const db = new Low(new JSONFile('db.json'), { users: [], seats: [] });
await db.read();
// Set up & start node express server
const app = express();
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.get('/api/recommendations', (req, res) => {
    const userId = parseInt(req.query.userId);
    const seatNumber = parseInt(req.query.seatNumber);
    if (!userId) {
        res.json('Please provide a userId as a query parameter.');
    }
    const user = db.data.users.find((user) => user.id === userId);
    const userPreferences = user.preferences;
    const historicalFeedback = user.feedback;
    const availableSeats = db.data.seats;
    const recommendedSeats = recommendSeats(userPreferences, availableSeats, historicalFeedback, userId, seatNumber);
    res.json(recommendedSeats);
    // server log
    console.log('Recommended Seats:');
    recommendedSeats.forEach(seat => {
        console.log(`Seat ID: ${seat.id}, Window: ${seat.isWindow}, Aisle: ${seat.isAisle}, Extra Legroom: ${seat.hasExtraLegroom}`);
        const previousFeedback = getPreviousFeedback(seat.id, userId, historicalFeedback);
        if (previousFeedback) {
            console.log(`Previous Feedback for Seat ID ${seat.id}: Rating: ${previousFeedback.rating}, Comments: ${previousFeedback.comments}`);
        }
        const similarSeats = getSimilarSeats(seat, recommendedSeats);
        if (similarSeats.length > 0) {
            const similarSeatIds = similarSeats.map(similarSeat => similarSeat.id).join(', ');
            console.log(`Other seats similar to this seat: Seat ID: ${similarSeatIds}`);
        }
    });
});
// @ts-ignore
app.post('/api/preferences', async (req, res) => {
    const { userId, preferences, feedback } = req.body;
    if (!userId || !preferences) {
        return res.status(400).json('Please provide userId and preferences.');
    }
    let user = db.data.users.find(user => user.id === parseInt(userId));
    if (!user) {
        // Create a new user if not found
        user = {
            id: parseInt(userId),
            preferences: preferences,
            feedback: [feedback]
        };
        db.data.users.push(user);
    }
    else {
        // Update existing user's preferences
        user.preferences = preferences;
        // Check if feedback for the seatId already exists
        const existingFeedback = user.feedback.find((f) => f.seatId === feedback.seatId);
        if (existingFeedback) {
            // Update existing feedback
            existingFeedback.rating = feedback.rating;
            existingFeedback.comments = feedback.comments;
        }
        else {
            // Add new feedback
            user.feedback.push(feedback);
        }
    }
    await db.write();
    res.status(200).json('User preferences updated successfully.');
});
// Serve client static files from the React app
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
app.use(express.static(path.join(__dirname, 'seat-recommendation-ui/build')));
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'seat-recommendation-ui/build', 'index.html'));
});
app.listen(5001, () => {
    console.log('Server is running on http://localhost:5001');
});
